Release Notes - Metadata Aggregator - Version 0.9.0
===================================================

Highlights

    * Now using Spring resources instead of (now deprecated) Shibboleth
      resources.

    * The factory bean classes PrivateKeyFactoryBean, PublicKeyFactoryBean,
      X509CertificateFactoryBean and X509CertificateChainFactoryBean
      bundled from the spring-extensions package have significant API
      improvements. Each factory now takes a "resource" property which
      is a Spring Resource rather than a Java File. This allows these
      factories to be used with any kind of Spring resource, including
      ClassPathResource. Existing configurations will need to change to
      compensate for this.
      
      Before:
      
      <bean class="...X509CertificateFactoryBean">
         <property name="certificateFile">
            <bean class="java.io.File">
               <constructor-arg value="..."/>
            </bean>
         </property>
      </bean>
      
      After:
      
      <bean class="...X509CertificateFactoryBean">
         <property name="resource">
            <bean class="org.springframework.core.io.FileSystemResource">
               <constructor-arg value="..."/>
            </bean>
         </property>
      </bean>
      
      If you were previously setting the input property of one of these
      factories to a string value representing the path, and relying on
      the Spring resource loader to convert that into a File object, you
      may need to change your configuration to explicitly create a
      FileSystemResource if that is not the default used by the
      Spring context type in use in your application.

    * Now uses the JAXP implementation supplied by the JRE, rather than
      a much older "endorsed" version. This will affect any configurations
      which depended on Xerces or Xalan specific extensions; re-endorse
      the implementation of your choice if this is an issue. 

    * All provided stages now implement a new collectionPredicate property.
      This can be set to a Predicate<Collection<Item<T>>> which will be
      applied to each collection passed to the stage. If the
      collectionPredicate returns true, the stage is executed as normal; this
      is the default. If the collectionPredicate returns false, the stage is
      skipped. This can be used used to perform lightweight conditional
      operations such as forming an EntitiesDescriptor from a collection only
      if the collection contains at least two items. The
      AtLeastCollectionPredicate class has been added to address this specific
      use case. Conditional evaluation of a series of stages with the same
      collectionPredicate can be simplified by use of a CompositeStage.

    * This release bundles a new version of the Shibboleth spring-extensions
      package, which provides a new IdentifiableBeanPostProcessor class.
      If you include an instance of this class in your Spring configuration,
      you can now default the "id" property on all Shibboleth components
      from the bean's "id" attribute, simplifying your configuration by
      removing the usual duplication between these values.
      
      Before:
      
      <bean class="..." id="theBean">
         <property name="id" value="theBean"/>
         ...
      </bean>
      
      After:
      
      <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor"/>
      
      <bean class="..." id="theBean">
         ...
      </bean>
      
	* The ItemSerializer interface is no longer defined over a collection of
	  items, but now (less surprisingly) operate on a single item. In addition,
	  ItemSerializer implementations are no longer responsible for closing the
	  OutputStream they write the serialized form of their input to. These changes
	  allow reuse of Serializer implementations in cases other than the current
	  SerializationStage. The SerializationStage implementation has also
	  been changed to iterate over all items in the collection instead of serializing
	  just the first item into the output file. This will not affect configurations which
	  only passed collections containing a single item to SerializationStage.

API Changes
    * ElementFormattingStage removed
    * EntityPublisherPathFilterStage removed
    * PushDownCacheDurationStage removed
    * PushDownValidUntilStage removed
    * SetPublicationInfo removed
    * XMLSignatureSigningStage's deriveKeyNames property removed
    * new property collectionPredicate added on all stages
    * new AtLeastCollectionPredicate class added
    * PrivateKeyFactoryBean, PublicKeyFactoryBean, X509CertificateFactoryBean
      and X509CertificateChainFactoryBean input properties are all now
      called "resource" and are all Spring Resource objects rather than
      Java File objects.
    * ItemSerializer#serialize now takes Item<T> instead of Collection<Item<T>>

** Bug
    * [MDA-130] - NPE in DOMResourceStage if resource reading fails

** New Feature
    * [JSE-1] - change factory beans to operate on resources, not files
    * [MDA-132] - generic conditional execution of stages

** Task
    * [MDA-122] - remove unimplemented stages and properties
    * [MDA-124] - Move from using Shibboleth resources to using Spring ones
    * [MDA-125] - can't set some properties on XMLSignatureValidationStage from
                  Spring configurations
    * [MDA-127] - simplify output from StatusMetadataLoggingStage
    * [MDA-128] - use @Override annotation in MDA sources
    * [MDA-129] - remove semi-functional ElementFormattingStage
    * [MDA-133] - unbundle "endorsed" libraries from distribution
    * [MDA-134] - refactor approach to serialisation


Release Notes - Metadata Aggregator - Version 0.8.0
===================================================

Highlights
   * API changes for new Shibboleth coding conventions, and in the
     use of generic types
   * Signature validation can reject empty references, blacklist
     algorithm URIs and protects against "wrapping" attacks.
   * New stage to extract MDRPI registrationInfo into item metadata.
   * Moved to Java 7, Apache Santuario V1.5
   * Improved CLI experience
   * bug fixes

   
API Changes
   * DomElementItem becomes DOMElementItem
   * DomElementSerializer becomes DOMElementSerializer
   * DomFilesystemSourceStage becomes DOMFilesystemSourceStage
   * DomResourceSourceStage becomes DOMResourceSourceStage
   * domResource bean properties become DOMResource
      * getDomResource becomes getDOMResource
      * setDomResource becomes setDOMResource
   * xpathExpression bean properties become XPathResource
      * getXpathExpression becomes getXPathExpression
      * setXpathExpression becomes setXPathExpression
   * xslResource bean properties become XSLResource
      * getXslResource becomes getXSLResource
      * setXslResource becomes setXSLResource
   * BaseDomTest test class becomes BaseDOMTest
   * Stages and Pipelines with generic types are parameterised by the
     type *wrapped* in the Item, not the implementation type.  For example,
     you would now use a Stage<Element> rather than a Stage<DOMElementItem>
   * Most internal Stage APIs have been changed in a similar way.  For example,
     Collection<DOMElementItem> would become Collection<Item<Element>>.
   * The generic type changes mean that the DOM-based stages can work over any
     class implementing Item<Element>, not just the supplied DOMElementItem.


** Bug
    * [MDA-44] - exceptions should be propagated up from subordinate pipelines
    * [MDA-81] - address multiple failed tests
    * [MDA-83] - PullUpCacheDurationStage ignores cacheDuration on EntityDescriptor elements
    * [MDA-87] - EntitiesDescriptorAssemblerStage does not declare namespace prefix
    * [MDA-90] - default identifier strategy used by GenerateIdStage sometimes generates bad IDs
    * [MDA-98] - review use of debug vs. trace logging in aggregator stages
    * [MDA-101] - XMLSignatureSigningStage does not work under Santuario 1.5.x
    * [MDA-112] - signature validation stage should protect against wrapping attacks

** Improvement
    * [MDA-66] - should be possible to have CLI termination without a stack dump
    * [MDA-85] - Guava Closeables.closeQuietly is deprecated
    * [MDA-86] - tests shouldn't pull UK production metadata
    * [MDA-89] - add license and release notes to aggregator-cli package
    * [MDA-95] - API changes for new Shibboleth coding conventions
    * [MDA-111] - bundle spring-extensions in MDA cli package
    * [MDA-113] - improve use of generic types internally and in API
    * [MDA-118] - correct double initialisation of ID attribute list in signing stage

** New Feature
    * [MDA-88] - assist debugging of signature creation by making pre-digest data available
    * [MDA-91] - allow checking that SAML metadata is signed using ID, not empty reference
    * [MDA-102] - allow configuration of URI resolver for XSLT stages
    * [MDA-120] - signature validation stage should allow algorithm blacklisting
    * [MDA-121] - add stage to extract mdrpi registrationAuthority value into item metadata

** Task
    * [MDA-68] - Convert command line interface to use JCommander
    * [MDA-70] - Move ClassToInstanceMultiMap to java-support
    * [MDA-80] - compile using, and require, Java 7
    * [MDA-107] - release process for MDA 0.8.0
    * [MDA-108] - make use of Java 7 type inference
